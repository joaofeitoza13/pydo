[tool.poetry]
name = "pydo"
version = "0.1.0"
description = ""
authors = ["João Feitoza <joao.feitoza@rastrosystem.com.br>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.12.*"
fastapi = "^0.111.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
taskipy = "^1.13.0"
ruff = "^0.5.0"
httpx = "^0.27.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

[tool.taskipy.tasks]
lint = 'ruff check . && ruff check . --diff'   # Mostra infrações e como corrigir
format = 'ruff check . --fix && ruff format .' # Corrige e formata de acordo com as convenções
run = 'fastapi dev pydo/app.py'                # Executa o projeto
pre_test = 'task lint'                         # Linta código antes dos testes
test = 'pytest -s -x --cov=pydo -vv'           # Executa testes verbosos com coverage
post_test = 'coverage html'                    # Gera relatório de testes
